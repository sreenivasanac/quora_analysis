QUORA ANSWER PROCESSOR - DATABASE POPULATION
OBJECTIVE:
Process existing answered_question_url entries in the PostgreSQL database and populate all missing fields by scraping detailed answer data.

This is the database table schema:
DATABASE SCHEMA (PostgreSQL):
CREATE TABLE quora_answers (
    id SERIAL PRIMARY KEY,
    question_url TEXT,
    answered_question_url TEXT,        -- Source URLs to process
    question_text TEXT,
    answer_content TEXT,               -- Markdown converted content
    revision_link TEXT,
    post_timestamp_raw TEXT,           -- Raw timestamp string
    post_timestamp_parsed TIMESTAMP    -- Parsed datetime with timezone
);

DATA EXTRACTION WORKFLOW
Phase 1: Main Answer Page Processing
For each answered_question_url in the database, we want to populate the other values in quora_answers table.

For each of the question answer, the value of the corresponding is given as:

Question URL:
question_url = response.css(".puppeteer_test_question_title a::attr(href)").get()

Question Text:
question_text = response.css(".puppeteer_test_question_title a::text").get()

Answer Content:
answer_content = response.css("div.q-text span::text").get()

Convert HTML to Markdown format
Convert images to their URLs
Use html2text or similar library for conversion, sample code as follows:

# Convert to markdown using html-to-markdown library
html-to-markdown library instruction given in this file @html_to_markdown_library_instrn.txt 

Revision Log Data:

For each answer answered_question_url link, construct log URL and extract revision data:
Construct Log URL:
log_url = f"{answered_question_url}/log"

Visit this log URL, and then from the dom selector, extract the values for the following:
Extract Revision Link:
revision_link = response.css("a.puppeteer_test_link::attr(href)").get()

Extract Post Raw Timestamp:
post_timestamp_raw = response.css("span.c1h7helg.c8970ew:last-child::text").get()

Phase 3: Timestamp Parsing
Convert raw timestamp strings to proper datetime format:

post_timestamp_parsed Post Timestamp Parsed: 
Take the value of post_timestamp_raw, which will be string value like "June 27, 2025 at 10:26:56 PM"
Convert this to datetime format, and save it in the database. It should properly be in datetime format. Keep a consistent time zone.
Sample code:

from datetime import datetime
import pytz

def parse_quora_timestamp(timestamp_str):
    """
    Convert "June 27, 2025 at 10:26:56 PM" to datetime object
    """
    try:
        # Parse the timestamp string
        dt = datetime.strptime(timestamp_str, "%B %d, %Y at %I:%M:%S %p")
        
        # Set timezone (assuming Pacific Time for Quora)
        pacific = pytz.timezone('US/Pacific')
        dt_with_tz = pacific.localize(dt)
        
        return dt_with_tz
    except ValueError as e:
        print(f"Error parsing timestamp: {timestamp_str}")
        return None


Update the above values back to the table quora_answers for those rows.
# Update query template
UPDATE_QUERY = """
UPDATE quora_answers 
SET question_url = %s,
    question_text = %s,
    answer_content = %s,
    revision_link = %s,
    post_timestamp_raw = %s,
    post_timestamp_parsed = %s
WHERE answered_question_url = %s
"""



Error Handling:

Skip and log failed URL processing
Continue processing remaining URLs
Implement retry logic for network failures
Validate data before database insertion

Progress Tracking:

Log every 50 processed entries
Save progress to resume interrupted runs
Track success/failure rates
Estimate completion time

Rate Limiting:

2-3 second delays between requests
Respect Quora's rate limits
Handle 429 (Too Many Requests) responses



DELIVERABLES

Enhanced Scrapy Spider - Process existing database entries
Timestamp Parser - Robust datetime conversion with timezone handling
Database Updater - Efficient batch updates with error handling
Progress Monitor - Real-time processing status and logging
Data Validator - Ensure data integrity before database updates

